package actors

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.Future
import scala.concurrent.duration.DurationInt

import akka.actor.Actor
import akka.actor.ActorRef
import akka.actor.Props
import akka.actor.actorRef2Scala
import akka.pattern.ask
import akka.pattern.pipe
import akka.util.Timeout
import play.api.Logger
import play.api.Play.current
import play.api.libs.concurrent.Akka
import xmpp.ChatSupervisor
import xmpp.CreateChat
import xmpp.InboundMessage
import xmpp.JID
import xmpp.RegisterParent

class Acty(child: ActorRef) extends Actor {
  child ! RegisterParent(self)

  def receive = {
    case InboundMessage(msg: String) => println(msg)
  }
}

object Main {

  // akka.Main.main(Array(classOf[ChatSupervisor].getName))

  def main(args: Array[String]): Unit = {

    implicit val timeout = Timeout(5 seconds)

    val jid = JID("barketyTest@jabber.org")
    val cp = Props(new ChatSupervisor(jid, "password", Option("domain"), Option(222)))
    val chatsup = Akka.system.actorOf(cp, name = "chatsup_actor")

    Logger.info("chat supervisor started: " + chatsup)

    val f: Future[Acty] = ask(chatsup, CreateChat(JID("troutwine@jabber.org"))).mapTo[Acty] // call pattern directly

    f pipeTo Akka.system.actorOf(Props[Acty], "acty")

    /*  (chatsup ! CreateChat(JID("troutwine@jabber.org"))) match {
      case Some(chatter) =>
        Akka.system.actorOf(new Acty(chatter)) //.start
        chatter ! OutboundMessage("Hi, you!")
      case _ =>
    }*/

  }

}
